import dayjs from "dayjs";
import { z } from "zod";
const dayJs = () => {
  return z.preprocess(
    (arg) => typeof arg == "string" ? dayjs(arg) : void 0,
    z.instanceof(dayjs)
  );
};
const keyboardIdParam = z.object({
  keyboardId: z.coerce.number()
});
const filterQuery = z.object({
  date: z.optional(dayJs())
});
function serializeFilterQuery(query) {
  const { date } = query;
  const serializable = {};
  if (query.date) {
    if (dayjs.isDayjs(date)) {
      serializable.date = date.format("YYYY-MM-DD");
    }
  }
  return serializable;
}
const keyboardListBody = z.object({
  keyboards: z.array(
    z.object({
      id: z.number(),
      name: z.string()
    })
  )
});
const keymap = z.object({
  keycode: z.string(),
  type: z.enum(["plain", "mtap", "ltap", "lmod", "layer"]),
  character: z.string().optional()
});
const keymapsBody = z.object({
  keymaps: z.array(z.array(z.array(z.array(keymap))))
});
const datesBody = z.object({
  dates: z.array(z.coerce.date())
});
const keymapUsage = z.array(
  z.array(z.array(z.number().default(0)).default([])).default([])
);
const layerUsage = z.record(z.string(), z.number().default(0));
const rowUsage = z.record(z.string(), z.number().default(0));
const handUsage = z.object({
  0: z.number().default(0),
  1: z.number().default(0)
});
const fingerUsage = z.object({
  0: z.number().default(0),
  1: z.number().default(0),
  2: z.number().default(0),
  3: z.number().default(0),
  4: z.number().default(0),
  5: z.number().default(0),
  6: z.number().default(0),
  7: z.number().default(0),
  8: z.number().default(0),
  9: z.number().default(0)
});
const totalKeypresses = z.number();
const totalCountBody = z.object({
  keymapUsage,
  layerUsage,
  rowUsage,
  handUsage,
  fingerUsage,
  totalKeypresses
});
const character = z.object({
  keycode: z.string(),
  modifiers: z.number(),
  counts: z.number(),
  character: z.string().optional()
});
const characterCountBody = z.object({
  records: z.array(character).default([]),
  totalCharacters: z.number().default(0)
});
const handRepetitions = z.array(z.array(z.number().default(0))).length(2);
const fingerRepetitions = z.array(z.array(z.number().default(0))).length(10);
const repetitionsBody = z.object({
  handRepetitions,
  fingerRepetitions
});
export {
  characterCountBody,
  datesBody,
  filterQuery,
  keyboardIdParam,
  keyboardListBody,
  keymapsBody,
  repetitionsBody,
  serializeFilterQuery,
  totalCountBody
};
//# sourceMappingURL=data:application/json;base64,
